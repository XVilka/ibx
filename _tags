# OASIS_START
# DO NOT EDIT (digest: c29bc15a9c565b86f30798ca990ec877)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library ibx
"lib/ibx.cmxs": use_ibx
"lib/account_code.cmx": for-pack(Ibx)
"lib/bar.cmx": for-pack(Ibx)
"lib/client_id.cmx": for-pack(Ibx)
"lib/config.cmx": for-pack(Ibx)
"lib/contract.cmx": for-pack(Ibx)
"lib/contract_id.cmx": for-pack(Ibx)
"lib/currency.cmx": for-pack(Ibx)
"lib/exchange.cmx": for-pack(Ibx)
"lib/execution_id.cmx": for-pack(Ibx)
"lib/ib.cmx": for-pack(Ibx)
"lib/option_right.cmx": for-pack(Ibx)
"lib/order.cmx": for-pack(Ibx)
"lib/order_id.cmx": for-pack(Ibx)
"lib/order_type.cmx": for-pack(Ibx)
"lib/pickable.cmx": for-pack(Ibx)
"lib/price.cmx": for-pack(Ibx)
"lib/query.cmx": for-pack(Ibx)
"lib/query_intf.cmx": for-pack(Ibx)
"lib/raw_bar.cmx": for-pack(Ibx)
"lib/raw_bar_intf.cmx": for-pack(Ibx)
"lib/raw_contract.cmx": for-pack(Ibx)
"lib/raw_contract_intf.cmx": for-pack(Ibx)
"lib/raw_order.cmx": for-pack(Ibx)
"lib/raw_order_intf.cmx": for-pack(Ibx)
"lib/recv_tag.cmx": for-pack(Ibx)
"lib/response.cmx": for-pack(Ibx)
"lib/response_intf.cmx": for-pack(Ibx)
"lib/security_id.cmx": for-pack(Ibx)
"lib/security_type.cmx": for-pack(Ibx)
"lib/send_tag.cmx": for-pack(Ibx)
"lib/std.cmx": for-pack(Ibx)
"lib/std_internal.cmx": for-pack(Ibx)
"lib/submit_order.cmx": for-pack(Ibx)
"lib/symbol.cmx": for-pack(Ibx)
"lib/trading_times.cmx": for-pack(Ibx)
"lib/tws.cmx": for-pack(Ibx)
"lib/tws_prot.cmx": for-pack(Ibx)
"lib/tws_reqs.cmx": for-pack(Ibx)
"lib/tws_result.cmx": for-pack(Ibx)
"lib/twsable.cmx": for-pack(Ibx)
"lib/unpickable.cmx": for-pack(Ibx)
"lib/volume.cmx": for-pack(Ibx)
<lib/*.ml{,i,y}>: package(async)
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(fieldslib.syntax)
<lib/*.ml{,i,y}>: package(sexplib.syntax)
<lib/*.ml{,i,y}>: package(str)
<lib/*.ml{,i,y}>: package(textutils)
<lib/*.ml{,i,y}>: package(threads)
# Executable test_runner
<lib_test/test_runner.{native,byte}>: package(async)
<lib_test/test_runner.{native,byte}>: package(core)
<lib_test/test_runner.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_runner.{native,byte}>: package(sexplib.syntax)
<lib_test/test_runner.{native,byte}>: package(str)
<lib_test/test_runner.{native,byte}>: package(textutils)
<lib_test/test_runner.{native,byte}>: package(threads)
<lib_test/test_runner.{native,byte}>: use_ibx
<lib_test/*.ml{,i,y}>: package(async)
<lib_test/*.ml{,i,y}>: package(core)
<lib_test/*.ml{,i,y}>: package(fieldslib.syntax)
<lib_test/*.ml{,i,y}>: package(sexplib.syntax)
<lib_test/*.ml{,i,y}>: package(str)
<lib_test/*.ml{,i,y}>: package(textutils)
<lib_test/*.ml{,i,y}>: package(threads)
<lib_test/*.ml{,i,y}>: use_ibx
# Executable buy_market_order
<examples/buy_market_order.{native,byte}>: package(async)
<examples/buy_market_order.{native,byte}>: package(core)
<examples/buy_market_order.{native,byte}>: package(fieldslib.syntax)
<examples/buy_market_order.{native,byte}>: package(sexplib.syntax)
<examples/buy_market_order.{native,byte}>: package(str)
<examples/buy_market_order.{native,byte}>: package(textutils)
<examples/buy_market_order.{native,byte}>: package(threads)
<examples/buy_market_order.{native,byte}>: use_ibx
# Executable demultiplex
<examples/demultiplex.{native,byte}>: package(async)
<examples/demultiplex.{native,byte}>: package(core)
<examples/demultiplex.{native,byte}>: package(fieldslib.syntax)
<examples/demultiplex.{native,byte}>: package(sexplib.syntax)
<examples/demultiplex.{native,byte}>: package(str)
<examples/demultiplex.{native,byte}>: package(textutils)
<examples/demultiplex.{native,byte}>: package(threads)
<examples/demultiplex.{native,byte}>: use_ibx
# Executable futures_chain
<examples/futures_chain.{native,byte}>: package(async)
<examples/futures_chain.{native,byte}>: package(core)
<examples/futures_chain.{native,byte}>: package(fieldslib.syntax)
<examples/futures_chain.{native,byte}>: package(sexplib.syntax)
<examples/futures_chain.{native,byte}>: package(str)
<examples/futures_chain.{native,byte}>: package(textutils)
<examples/futures_chain.{native,byte}>: package(threads)
<examples/futures_chain.{native,byte}>: use_ibx
# Executable last_price
<examples/last_price.{native,byte}>: package(async)
<examples/last_price.{native,byte}>: package(core)
<examples/last_price.{native,byte}>: package(fieldslib.syntax)
<examples/last_price.{native,byte}>: package(sexplib.syntax)
<examples/last_price.{native,byte}>: package(str)
<examples/last_price.{native,byte}>: package(textutils)
<examples/last_price.{native,byte}>: package(threads)
<examples/last_price.{native,byte}>: use_ibx
# Executable plot_history
<examples/plot_history.{native,byte}>: package(async)
<examples/plot_history.{native,byte}>: package(core)
<examples/plot_history.{native,byte}>: package(fieldslib.syntax)
<examples/plot_history.{native,byte}>: package(gnuplot)
<examples/plot_history.{native,byte}>: package(sexplib.syntax)
<examples/plot_history.{native,byte}>: package(str)
<examples/plot_history.{native,byte}>: package(textutils)
<examples/plot_history.{native,byte}>: package(threads)
<examples/plot_history.{native,byte}>: use_ibx
# Executable plot_taq_data
<examples/plot_taq_data.{native,byte}>: package(async)
<examples/plot_taq_data.{native,byte}>: package(core)
<examples/plot_taq_data.{native,byte}>: package(fieldslib.syntax)
<examples/plot_taq_data.{native,byte}>: package(gnuplot)
<examples/plot_taq_data.{native,byte}>: package(sexplib.syntax)
<examples/plot_taq_data.{native,byte}>: package(str)
<examples/plot_taq_data.{native,byte}>: package(textutils)
<examples/plot_taq_data.{native,byte}>: package(threads)
<examples/plot_taq_data.{native,byte}>: use_ibx
<examples/*.ml{,i,y}>: package(gnuplot)
# Executable print_account_updates
<examples/print_account_updates.{native,byte}>: package(async)
<examples/print_account_updates.{native,byte}>: package(core)
<examples/print_account_updates.{native,byte}>: package(fieldslib.syntax)
<examples/print_account_updates.{native,byte}>: package(sexplib.syntax)
<examples/print_account_updates.{native,byte}>: package(str)
<examples/print_account_updates.{native,byte}>: package(textutils)
<examples/print_account_updates.{native,byte}>: package(threads)
<examples/print_account_updates.{native,byte}>: use_ibx
# Executable print_market_depth
<examples/print_market_depth.{native,byte}>: package(async)
<examples/print_market_depth.{native,byte}>: package(core)
<examples/print_market_depth.{native,byte}>: package(fieldslib.syntax)
<examples/print_market_depth.{native,byte}>: package(sexplib.syntax)
<examples/print_market_depth.{native,byte}>: package(str)
<examples/print_market_depth.{native,byte}>: package(textutils)
<examples/print_market_depth.{native,byte}>: package(threads)
<examples/print_market_depth.{native,byte}>: use_ibx
# Executable print_realtime_bars
<examples/print_realtime_bars.{native,byte}>: package(async)
<examples/print_realtime_bars.{native,byte}>: package(core)
<examples/print_realtime_bars.{native,byte}>: package(fieldslib.syntax)
<examples/print_realtime_bars.{native,byte}>: package(sexplib.syntax)
<examples/print_realtime_bars.{native,byte}>: package(str)
<examples/print_realtime_bars.{native,byte}>: package(textutils)
<examples/print_realtime_bars.{native,byte}>: package(threads)
<examples/print_realtime_bars.{native,byte}>: use_ibx
# Executable option_chain
<examples/option_chain.{native,byte}>: package(async)
<examples/option_chain.{native,byte}>: package(core)
<examples/option_chain.{native,byte}>: package(fieldslib.syntax)
<examples/option_chain.{native,byte}>: package(sexplib.syntax)
<examples/option_chain.{native,byte}>: package(str)
<examples/option_chain.{native,byte}>: package(textutils)
<examples/option_chain.{native,byte}>: package(threads)
<examples/option_chain.{native,byte}>: use_ibx
# Executable quote_table
<examples/quote_table.{native,byte}>: package(async)
<examples/quote_table.{native,byte}>: package(core)
<examples/quote_table.{native,byte}>: package(fieldslib.syntax)
<examples/quote_table.{native,byte}>: package(sexplib.syntax)
<examples/quote_table.{native,byte}>: package(str)
<examples/quote_table.{native,byte}>: package(textutils)
<examples/quote_table.{native,byte}>: package(threads)
<examples/quote_table.{native,byte}>: use_ibx
# Executable server_time
<examples/server_time.{native,byte}>: package(async)
<examples/server_time.{native,byte}>: package(core)
<examples/server_time.{native,byte}>: package(fieldslib.syntax)
<examples/server_time.{native,byte}>: package(sexplib.syntax)
<examples/server_time.{native,byte}>: package(str)
<examples/server_time.{native,byte}>: package(textutils)
<examples/server_time.{native,byte}>: package(threads)
<examples/server_time.{native,byte}>: use_ibx
# Executable show_portfolio
<examples/show_portfolio.{native,byte}>: package(async)
<examples/show_portfolio.{native,byte}>: package(core)
<examples/show_portfolio.{native,byte}>: package(fieldslib.syntax)
<examples/show_portfolio.{native,byte}>: package(sexplib.syntax)
<examples/show_portfolio.{native,byte}>: package(str)
<examples/show_portfolio.{native,byte}>: package(textutils)
<examples/show_portfolio.{native,byte}>: package(threads)
<examples/show_portfolio.{native,byte}>: use_ibx
# Executable submit_orders
<examples/submit_orders.{native,byte}>: package(async)
<examples/submit_orders.{native,byte}>: package(core)
<examples/submit_orders.{native,byte}>: package(fieldslib.syntax)
<examples/submit_orders.{native,byte}>: package(sexplib.syntax)
<examples/submit_orders.{native,byte}>: package(str)
<examples/submit_orders.{native,byte}>: package(textutils)
<examples/submit_orders.{native,byte}>: package(threads)
<examples/submit_orders.{native,byte}>: use_ibx
<examples/*.ml{,i,y}>: package(async)
<examples/*.ml{,i,y}>: package(core)
<examples/*.ml{,i,y}>: package(fieldslib.syntax)
<examples/*.ml{,i,y}>: package(sexplib.syntax)
<examples/*.ml{,i,y}>: package(str)
<examples/*.ml{,i,y}>: package(textutils)
<examples/*.ml{,i,y}>: package(threads)
<examples/*.ml{,i,y}>: use_ibx
# OASIS_STOP
<**/*.ml{,i}>: annot, warn_e, warn_r
